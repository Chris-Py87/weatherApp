/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.eap.pli24.weatherapp.gui;

import com.eap.pli24.weatherapp.db.CityForecast;
import com.eap.pli24.weatherapp.db.MyJpaLinker;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class CityForecastHistoryForm extends javax.swing.JFrame {

    private MyJpaLinker linker = null;
    private CityForecast forecast;
    
    private List<CityForecast> forecastsList = null;
    /**
     * Creates new form CitiesForecastsStatisticsForm
     */
    public CityForecastHistoryForm() {
        
        setTitle("Ιστορικό Αναζήτησης και Διαγραφή Πόλεων");
        initComponents();
        //Θέτουμε το frame στο κέντρο της οθόνης
        this.setLocationRelativeTo(null);
        linker = new MyJpaLinker();
       
        
        try {            
            populateCityList(this.citiesWithForecastJList);             
        } catch (Exception e) {
            System.out.println("History: " + e.getMessage());
        }
        /**
         * Δημιουργούμε εναν ανώνυμο Selection Listener για την εμφάνιση του forecast της
         * πόλης που επιλέγεται απο μία jList
         */
        citiesWithForecastJList.addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                String selectedCity = citiesWithForecastJList.getSelectedValue();
                if (selectedCity != null) {                    
                    displayForecast(selectedCity);
                       
                }
            }
        });
        
        
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = forecastTable.getSelectedRow();
                if (selectedRow != -1) { // Αν έχει επιλεγεί γραμμή
                    DefaultTableModel model = (DefaultTableModel) forecastTable.getModel();
                    // Λαμβάνεται η επιλεγμένη γραμμή από το μοντέλο του πίνακα
                    CityForecast selectedForecast = forecastsList.get(selectedRow);
                    // Γίνεται διαγραφή της επιλεγμένης εγγραφής από την βάση
                    linker.deleteCityForecastFromDb(selectedForecast);
                    // Αφαιρείται η γραμμή από τον πίνακα
                    model.removeRow(selectedRow);                  
                    // Ενημερώνουμε το Jlist Με τα ονόματα των εναπομεινουσών πόλεων
                    updateCityJList();          
                } else {
                     
                String warningMessage = "<html><body>"
                    + "<p style='font-size:12px; font-weight:bold; color:red;'>Επιλέξτε μια γραμμή για διαγραφή.</p>"                                 
                    + "</body></html>";            
                JOptionPane.showMessageDialog(null, 
                        warningMessage,
                        "Διαγραφή",
                        JOptionPane.WARNING_MESSAGE);
                }
            }
        });
         
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        forecastTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        citiesWithForecastJList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(153, 204, 255));

        jScrollPane2.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        forecastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ΟΝΟΜΑ ΠΟΛΗΣ", "ΗΜΕΡΟΜΗΝΙΑ", "ΘΕΡΜΟΚΡΑΣΙΑ", "ΥΓΡΑΣΙΑ", "ΤΑΧΥΤΗΤΑ ΑΝΕΜΟΥ", "ΔΕΙΚΤΗΣ UV", "ΠΕΡΙΓΡΑΦΗ ΚΑΙΡΟΥ"
            }
        ));
        jScrollPane2.setViewportView(forecastTable);

        jPanel1.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Επιλογή Πόλης:");

        citiesWithForecastJList.setBackground(new java.awt.Color(204, 204, 204));
        citiesWithForecastJList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        citiesWithForecastJList.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        citiesWithForecastJList.setForeground(new java.awt.Color(51, 51, 51));
        citiesWithForecastJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        citiesWithForecastJList.setToolTipText("");
        jScrollPane1.setViewportView(citiesWithForecastJList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 102, 51));

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/eap/pli24/weatherapp/resources/delete.27x30.png"))); // NOI18N
        deleteButton.setText("Διαγραφή");
        deleteButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 1165, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void populateCityList(JList<String> list) {
        //Γίνεται εκκαθθαριση της jList
        list.setModel(new DefaultListModel<>()); 

        //Αποθηκέουμε σε μία Λίστα τα ονόματα των πόλεων που έχουμε στην ΒΔ.
        List <String> cities = linker.getCitiesFromForecastTable();

        // Προσθέτουμε τα ονόματα των Πόλεων στο στοιχείο Jlist
        DefaultListModel<String> model = (DefaultListModel<String>) list.getModel();
        for (String city : cities) {
            model.addElement(city);
        }
    }
    
    private void displayForecast(String selectedCity) {
        
        
        //Δημιουργούμε TableModel για τον πίνακα
        DefaultTableModel model = new DefaultTableModel();

        //Ονομάζουμε τις Στήλες του Πίνακα
        model.setColumnIdentifiers(new String[]
        {
            "ΟΝΟΜΑ ΠΟΛΗΣ",
            "ΗΜΕΡΟΜΗΝΙΑ", 
            "ΘΕΡΜΟΚΡΑΣΙΑ", 
            "ΥΓΡΑΣΙΑ", 
            "ΤΑΧΥΤΗΤΑ ΑΝΕΜΟΥ", 
            "ΔΕΙΚΤΗΣ UV", 
            "ΠΕΡΙΓΡΑΦΗ"
        });

        /**
         * Καλούμε την μέθοδο getForecastFromDB() για την εμφάνιση των αποθηκευμένων 
         * forecast και αποθήκευση σε σε μία λίστα 
        */
        forecastsList = linker.getForecastFromDBinList(selectedCity);

        if(forecastsList != null){           
        
            for (CityForecast c : forecastsList) {

                String cityName = c.getCityname().getName();
                Date convertedCurrentDate = c.getObservationdate();
                SimpleDateFormat mdyFormat = new SimpleDateFormat("dd-MM-yyyy");
                String date = mdyFormat.format(convertedCurrentDate);
                String temperature = String.valueOf(c.getTemperature());
                String humidity = String.valueOf(c.getHumidity());
                String windSpeed = String.valueOf(c.getWindspeed());
                String uvIndex = String.valueOf(c.getUvindex());
                String weatherDescription = c.getWeatherdescription();

                String[] forecastTableRow = new String[]{cityName, date, temperature, humidity, windSpeed, uvIndex, weatherDescription};

                //Στοίχιση στο κέντρο
                forecastTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
                forecastTable.setDefaultRenderer(Object.class, centerRenderer);
                //Προσθήκη κάθε forecast στον Πίνακα με τα καιρικά δεδομένα
                model.addRow(forecastTableRow);
                //Εμφάνιση των δεδομένων στο jTable
                forecastTable.setModel(model);
            }
            
        }else{
            JOptionPane.showMessageDialog(null, 
                        "Η επιλεχθείσα Πόλη δεν έχει αποθηκευμένο δελτίο καιρού",
                        "Διαγραφή",
                        JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    /**
     * Γίνεται ενημέρωση του Jlist με τα ονόματα των Πόλεων που έχουμε αποθηκευμένα
     */
    private void updateCityJList() {
        // Δημιουργία νέου μοντέλου για τη λίστα των πόλεων
        DefaultListModel<String> model = new DefaultListModel<>();
        
        try {
            // Λήψη της λίστας των πόλεων από τον linker
            List<String> cities = linker.getCitiesFromForecastTable();
            // Προσθήκη κάθε πόλης στο μοντέλο
            for (String city : cities) {
                model.addElement(city);
            }
        // Ορισμός του νέου μοντέλου στη λίστα πόλεων της φόρμας
        citiesWithForecastJList.setModel(model);
        } catch (Exception e) {
            System.out.println("Error updating city list: " + e.getMessage());
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> citiesWithForecastJList;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable forecastTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
